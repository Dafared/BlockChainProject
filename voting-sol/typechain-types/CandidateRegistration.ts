/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace CandidateRegistration {
  export type CandidateStruct = {
    candidateID: BigNumberish;
    nationalID: string;
    name: string;
    party: string;
    manifesto: string;
    isRegistered: boolean;
  };

  export type CandidateStructOutput = [
    candidateID: bigint,
    nationalID: string,
    name: string,
    party: string,
    manifesto: string,
    isRegistered: boolean
  ] & {
    candidateID: bigint;
    nationalID: string;
    name: string;
    party: string;
    manifesto: string;
    isRegistered: boolean;
  };
}

export interface CandidateRegistrationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "candidateCount"
      | "candidateIDs"
      | "candidates"
      | "electionCommission"
      | "getAllCandidateIDs"
      | "getCandidate"
      | "getCandidateIDByNationalID"
      | "getTotalCandidates"
      | "isRegisteredCandidateNationalID"
      | "isValidCandidate"
      | "nationalIDToCandidateID"
      | "registerCandidate"
      | "selfRegisterAsCandidate"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "CandidateRegistered"): EventFragment;

  encodeFunctionData(
    functionFragment: "candidateCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "candidateIDs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "candidates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "electionCommission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCandidateIDs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidateIDByNationalID",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalCandidates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredCandidateNationalID",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidCandidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nationalIDToCandidateID",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerCandidate",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "selfRegisterAsCandidate",
    values: [string, string, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "candidateCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "electionCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCandidateIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidateIDByNationalID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredCandidateNationalID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nationalIDToCandidateID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selfRegisterAsCandidate",
    data: BytesLike
  ): Result;
}

export namespace CandidateRegisteredEvent {
  export type InputTuple = [
    candidateID: BigNumberish,
    name: string,
    party: string
  ];
  export type OutputTuple = [candidateID: bigint, name: string, party: string];
  export interface OutputObject {
    candidateID: bigint;
    name: string;
    party: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CandidateRegistration extends BaseContract {
  connect(runner?: ContractRunner | null): CandidateRegistration;
  waitForDeployment(): Promise<this>;

  interface: CandidateRegistrationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  candidateCount: TypedContractMethod<[], [bigint], "view">;

  candidateIDs: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  candidates: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, string, boolean] & {
        candidateID: bigint;
        nationalID: string;
        name: string;
        party: string;
        manifesto: string;
        isRegistered: boolean;
      }
    ],
    "view"
  >;

  electionCommission: TypedContractMethod<[], [string], "view">;

  getAllCandidateIDs: TypedContractMethod<[], [bigint[]], "view">;

  getCandidate: TypedContractMethod<
    [_candidateID: BigNumberish],
    [CandidateRegistration.CandidateStructOutput],
    "view"
  >;

  getCandidateIDByNationalID: TypedContractMethod<
    [_nationalID: string],
    [bigint],
    "view"
  >;

  getTotalCandidates: TypedContractMethod<[], [bigint], "view">;

  isRegisteredCandidateNationalID: TypedContractMethod<
    [_nationalID: string],
    [boolean],
    "view"
  >;

  isValidCandidate: TypedContractMethod<
    [_candidateID: BigNumberish],
    [boolean],
    "view"
  >;

  nationalIDToCandidateID: TypedContractMethod<
    [arg0: string],
    [bigint],
    "view"
  >;

  registerCandidate: TypedContractMethod<
    [_nationalID: string, _name: string, _party: string, _manifesto: string],
    [void],
    "nonpayable"
  >;

  selfRegisterAsCandidate: TypedContractMethod<
    [_nationalID: string, _name: string, _party: string, _manifesto: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "candidateCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "candidateIDs"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "candidates"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, string, boolean] & {
        candidateID: bigint;
        nationalID: string;
        name: string;
        party: string;
        manifesto: string;
        isRegistered: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "electionCommission"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllCandidateIDs"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getCandidate"
  ): TypedContractMethod<
    [_candidateID: BigNumberish],
    [CandidateRegistration.CandidateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCandidateIDByNationalID"
  ): TypedContractMethod<[_nationalID: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalCandidates"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isRegisteredCandidateNationalID"
  ): TypedContractMethod<[_nationalID: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidCandidate"
  ): TypedContractMethod<[_candidateID: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "nationalIDToCandidateID"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerCandidate"
  ): TypedContractMethod<
    [_nationalID: string, _name: string, _party: string, _manifesto: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "selfRegisterAsCandidate"
  ): TypedContractMethod<
    [_nationalID: string, _name: string, _party: string, _manifesto: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CandidateRegistered"
  ): TypedContractEvent<
    CandidateRegisteredEvent.InputTuple,
    CandidateRegisteredEvent.OutputTuple,
    CandidateRegisteredEvent.OutputObject
  >;

  filters: {
    "CandidateRegistered(uint256,string,string)": TypedContractEvent<
      CandidateRegisteredEvent.InputTuple,
      CandidateRegisteredEvent.OutputTuple,
      CandidateRegisteredEvent.OutputObject
    >;
    CandidateRegistered: TypedContractEvent<
      CandidateRegisteredEvent.InputTuple,
      CandidateRegisteredEvent.OutputTuple,
      CandidateRegisteredEvent.OutputObject
    >;
  };
}
