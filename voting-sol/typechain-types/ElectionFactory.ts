/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ElectionFactory {
  export type ElectionSystemStruct = {
    electionName: string;
    voterRegistration: AddressLike;
    candidateRegistration: AddressLike;
    voting: AddressLike;
    electionResults: AddressLike;
    electionVerification: AddressLike;
    creationTime: BigNumberish;
  };

  export type ElectionSystemStructOutput = [
    electionName: string,
    voterRegistration: string,
    candidateRegistration: string,
    voting: string,
    electionResults: string,
    electionVerification: string,
    creationTime: bigint
  ] & {
    electionName: string;
    voterRegistration: string;
    candidateRegistration: string;
    voting: string;
    electionResults: string;
    electionVerification: string;
    creationTime: bigint;
  };
}

export interface ElectionFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deployedElections"
      | "electionCommission"
      | "getDeployedElectionsCount"
      | "getElectionSystem"
      | "registerElectionSystem"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ElectionSystemDeployed"): EventFragment;

  encodeFunctionData(
    functionFragment: "deployedElections",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "electionCommission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployedElectionsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getElectionSystem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerElectionSystem",
    values: [
      string,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployedElections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electionCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedElectionsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getElectionSystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerElectionSystem",
    data: BytesLike
  ): Result;
}

export namespace ElectionSystemDeployedEvent {
  export type InputTuple = [
    electionName: string,
    voterRegistration: AddressLike,
    candidateRegistration: AddressLike,
    voting: AddressLike,
    electionResults: AddressLike,
    electionVerification: AddressLike
  ];
  export type OutputTuple = [
    electionName: string,
    voterRegistration: string,
    candidateRegistration: string,
    voting: string,
    electionResults: string,
    electionVerification: string
  ];
  export interface OutputObject {
    electionName: string;
    voterRegistration: string;
    candidateRegistration: string;
    voting: string;
    electionResults: string;
    electionVerification: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ElectionFactory extends BaseContract {
  connect(runner?: ContractRunner | null): ElectionFactory;
  waitForDeployment(): Promise<this>;

  interface: ElectionFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deployedElections: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, string, string, bigint] & {
        electionName: string;
        voterRegistration: string;
        candidateRegistration: string;
        voting: string;
        electionResults: string;
        electionVerification: string;
        creationTime: bigint;
      }
    ],
    "view"
  >;

  electionCommission: TypedContractMethod<[], [string], "view">;

  getDeployedElectionsCount: TypedContractMethod<[], [bigint], "view">;

  getElectionSystem: TypedContractMethod<
    [_index: BigNumberish],
    [ElectionFactory.ElectionSystemStructOutput],
    "view"
  >;

  registerElectionSystem: TypedContractMethod<
    [
      _electionName: string,
      _voterRegistration: AddressLike,
      _candidateRegistration: AddressLike,
      _voting: AddressLike,
      _electionResults: AddressLike,
      _electionVerification: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deployedElections"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, string, string, bigint] & {
        electionName: string;
        voterRegistration: string;
        candidateRegistration: string;
        voting: string;
        electionResults: string;
        electionVerification: string;
        creationTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "electionCommission"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDeployedElectionsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getElectionSystem"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [ElectionFactory.ElectionSystemStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerElectionSystem"
  ): TypedContractMethod<
    [
      _electionName: string,
      _voterRegistration: AddressLike,
      _candidateRegistration: AddressLike,
      _voting: AddressLike,
      _electionResults: AddressLike,
      _electionVerification: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ElectionSystemDeployed"
  ): TypedContractEvent<
    ElectionSystemDeployedEvent.InputTuple,
    ElectionSystemDeployedEvent.OutputTuple,
    ElectionSystemDeployedEvent.OutputObject
  >;

  filters: {
    "ElectionSystemDeployed(string,address,address,address,address,address)": TypedContractEvent<
      ElectionSystemDeployedEvent.InputTuple,
      ElectionSystemDeployedEvent.OutputTuple,
      ElectionSystemDeployedEvent.OutputObject
    >;
    ElectionSystemDeployed: TypedContractEvent<
      ElectionSystemDeployedEvent.InputTuple,
      ElectionSystemDeployedEvent.OutputTuple,
      ElectionSystemDeployedEvent.OutputObject
    >;
  };
}
