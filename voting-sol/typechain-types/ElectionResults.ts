/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ElectionResults {
  export type ElectionResultStruct = {
    candidateID: BigNumberish;
    nationalID: string;
    candidateName: string;
    party: string;
    voteCount: BigNumberish;
  };

  export type ElectionResultStructOutput = [
    candidateID: bigint,
    nationalID: string,
    candidateName: string,
    party: string,
    voteCount: bigint
  ] & {
    candidateID: bigint;
    nationalID: string;
    candidateName: string;
    party: string;
    voteCount: bigint;
  };
}

export interface ElectionResultsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "candidateContract"
      | "electionCommission"
      | "finalizeResults"
      | "getAllResults"
      | "getVoterTurnout"
      | "getWinner"
      | "resultFinalized"
      | "totalVotesCast"
      | "voterContract"
      | "votingContract"
      | "winningCandidateID"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ResultsFinalized"): EventFragment;

  encodeFunctionData(
    functionFragment: "candidateContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "electionCommission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeResults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllResults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterTurnout",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getWinner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "resultFinalized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotesCast",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voterContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "winningCandidateID",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "candidateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electionCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterTurnout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWinner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resultFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVotesCast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voterContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "winningCandidateID",
    data: BytesLike
  ): Result;
}

export namespace ResultsFinalizedEvent {
  export type InputTuple = [
    winningCandidateID: BigNumberish,
    totalVotes: BigNumberish
  ];
  export type OutputTuple = [winningCandidateID: bigint, totalVotes: bigint];
  export interface OutputObject {
    winningCandidateID: bigint;
    totalVotes: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ElectionResults extends BaseContract {
  connect(runner?: ContractRunner | null): ElectionResults;
  waitForDeployment(): Promise<this>;

  interface: ElectionResultsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  candidateContract: TypedContractMethod<[], [string], "view">;

  electionCommission: TypedContractMethod<[], [string], "view">;

  finalizeResults: TypedContractMethod<[], [void], "nonpayable">;

  getAllResults: TypedContractMethod<
    [],
    [ElectionResults.ElectionResultStructOutput[]],
    "view"
  >;

  getVoterTurnout: TypedContractMethod<[], [bigint], "view">;

  getWinner: TypedContractMethod<
    [],
    [ElectionResults.ElectionResultStructOutput],
    "view"
  >;

  resultFinalized: TypedContractMethod<[], [boolean], "view">;

  totalVotesCast: TypedContractMethod<[], [bigint], "view">;

  voterContract: TypedContractMethod<[], [string], "view">;

  votingContract: TypedContractMethod<[], [string], "view">;

  winningCandidateID: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "candidateContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "electionCommission"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "finalizeResults"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllResults"
  ): TypedContractMethod<
    [],
    [ElectionResults.ElectionResultStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoterTurnout"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWinner"
  ): TypedContractMethod<
    [],
    [ElectionResults.ElectionResultStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "resultFinalized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalVotesCast"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "voterContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "votingContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "winningCandidateID"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ResultsFinalized"
  ): TypedContractEvent<
    ResultsFinalizedEvent.InputTuple,
    ResultsFinalizedEvent.OutputTuple,
    ResultsFinalizedEvent.OutputObject
  >;

  filters: {
    "ResultsFinalized(uint256,uint256)": TypedContractEvent<
      ResultsFinalizedEvent.InputTuple,
      ResultsFinalizedEvent.OutputTuple,
      ResultsFinalizedEvent.OutputObject
    >;
    ResultsFinalized: TypedContractEvent<
      ResultsFinalizedEvent.InputTuple,
      ResultsFinalizedEvent.OutputTuple,
      ResultsFinalizedEvent.OutputObject
    >;
  };
}
