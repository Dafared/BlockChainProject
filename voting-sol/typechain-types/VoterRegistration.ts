/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface VoterRegistrationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "electionCommission"
      | "getTotalVoters"
      | "getVoterNationalID"
      | "hasVoted"
      | "isRegisteredNationalID"
      | "isRegisteredVoter"
      | "markVoted"
      | "nationalIDToAddress"
      | "registerVoter"
      | "registeredVoterAddresses"
      | "selfRegister"
      | "voterCount"
      | "voters"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "VoterRegistered" | "VoterStatusUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "electionCommission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalVoters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterNationalID",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredNationalID",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredVoter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "markVoted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nationalIDToAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVoter",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredVoterAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "selfRegister",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "voterCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "voters", values: [AddressLike]): string;

  decodeFunctionResult(
    functionFragment: "electionCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterNationalID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredNationalID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nationalIDToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredVoterAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selfRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voterCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;
}

export namespace VoterRegisteredEvent {
  export type InputTuple = [voterAddress: AddressLike, nationalID: string];
  export type OutputTuple = [voterAddress: string, nationalID: string];
  export interface OutputObject {
    voterAddress: string;
    nationalID: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterStatusUpdatedEvent {
  export type InputTuple = [voterAddress: AddressLike, hasVoted: boolean];
  export type OutputTuple = [voterAddress: string, hasVoted: boolean];
  export interface OutputObject {
    voterAddress: string;
    hasVoted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VoterRegistration extends BaseContract {
  connect(runner?: ContractRunner | null): VoterRegistration;
  waitForDeployment(): Promise<this>;

  interface: VoterRegistrationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  electionCommission: TypedContractMethod<[], [string], "view">;

  getTotalVoters: TypedContractMethod<[], [bigint], "view">;

  getVoterNationalID: TypedContractMethod<
    [_voterAddress: AddressLike],
    [string],
    "view"
  >;

  hasVoted: TypedContractMethod<
    [_voterAddress: AddressLike],
    [boolean],
    "view"
  >;

  isRegisteredNationalID: TypedContractMethod<
    [_nationalID: string],
    [boolean],
    "view"
  >;

  isRegisteredVoter: TypedContractMethod<
    [_voterAddress: AddressLike],
    [boolean],
    "view"
  >;

  markVoted: TypedContractMethod<
    [_voterAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  nationalIDToAddress: TypedContractMethod<[arg0: string], [string], "view">;

  registerVoter: TypedContractMethod<
    [_voterAddress: AddressLike, _nationalID: string, _name: string],
    [void],
    "nonpayable"
  >;

  registeredVoterAddresses: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  selfRegister: TypedContractMethod<
    [_nationalID: string, _name: string],
    [void],
    "nonpayable"
  >;

  voterCount: TypedContractMethod<[], [bigint], "view">;

  voters: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, boolean, string, string] & {
        isRegistered: boolean;
        hasVoted: boolean;
        nationalID: string;
        name: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "electionCommission"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalVoters"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVoterNationalID"
  ): TypedContractMethod<[_voterAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<[_voterAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isRegisteredNationalID"
  ): TypedContractMethod<[_nationalID: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isRegisteredVoter"
  ): TypedContractMethod<[_voterAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "markVoted"
  ): TypedContractMethod<[_voterAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nationalIDToAddress"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "registerVoter"
  ): TypedContractMethod<
    [_voterAddress: AddressLike, _nationalID: string, _name: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registeredVoterAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "selfRegister"
  ): TypedContractMethod<
    [_nationalID: string, _name: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voterCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "voters"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, boolean, string, string] & {
        isRegistered: boolean;
        hasVoted: boolean;
        nationalID: string;
        name: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "VoterRegistered"
  ): TypedContractEvent<
    VoterRegisteredEvent.InputTuple,
    VoterRegisteredEvent.OutputTuple,
    VoterRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "VoterStatusUpdated"
  ): TypedContractEvent<
    VoterStatusUpdatedEvent.InputTuple,
    VoterStatusUpdatedEvent.OutputTuple,
    VoterStatusUpdatedEvent.OutputObject
  >;

  filters: {
    "VoterRegistered(address,string)": TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;
    VoterRegistered: TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;

    "VoterStatusUpdated(address,bool)": TypedContractEvent<
      VoterStatusUpdatedEvent.InputTuple,
      VoterStatusUpdatedEvent.OutputTuple,
      VoterStatusUpdatedEvent.OutputObject
    >;
    VoterStatusUpdated: TypedContractEvent<
      VoterStatusUpdatedEvent.InputTuple,
      VoterStatusUpdatedEvent.OutputTuple,
      VoterStatusUpdatedEvent.OutputObject
    >;
  };
}
