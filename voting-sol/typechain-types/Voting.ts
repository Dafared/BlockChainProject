/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface VotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "candidateContract"
      | "castVote"
      | "castVoteByNationalID"
      | "electionCommission"
      | "electionName"
      | "endElection"
      | "endTime"
      | "getRemainingTime"
      | "getVoteByNationalID"
      | "getVoteCount"
      | "setVerificationContract"
      | "startRegistration"
      | "startTime"
      | "startVoting"
      | "state"
      | "verificationContract"
      | "voterContract"
      | "votesReceived"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ElectionStateChanged"
      | "VerificationContractSet"
      | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "candidateContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteByNationalID",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "electionCommission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "electionName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endElection",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRemainingTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteByNationalID",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerificationContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startRegistration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startVoting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verificationContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voterContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votesReceived",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "candidateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVoteByNationalID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electionCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electionName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endElection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteByNationalID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerificationContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verificationContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voterContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votesReceived",
    data: BytesLike
  ): Result;
}

export namespace ElectionStateChangedEvent {
  export type InputTuple = [newState: BigNumberish];
  export type OutputTuple = [newState: bigint];
  export interface OutputObject {
    newState: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationContractSetEvent {
  export type InputTuple = [verificationContract: AddressLike];
  export type OutputTuple = [verificationContract: string];
  export interface OutputObject {
    verificationContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    voter: AddressLike,
    candidateID: BigNumberish,
    voterNationalID: string
  ];
  export type OutputTuple = [
    voter: string,
    candidateID: bigint,
    voterNationalID: string
  ];
  export interface OutputObject {
    voter: string;
    candidateID: bigint;
    voterNationalID: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Voting extends BaseContract {
  connect(runner?: ContractRunner | null): Voting;
  waitForDeployment(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  candidateContract: TypedContractMethod<[], [string], "view">;

  castVote: TypedContractMethod<
    [_candidateID: BigNumberish],
    [void],
    "nonpayable"
  >;

  castVoteByNationalID: TypedContractMethod<
    [_nationalID: string, _candidateID: BigNumberish],
    [void],
    "nonpayable"
  >;

  electionCommission: TypedContractMethod<[], [string], "view">;

  electionName: TypedContractMethod<[], [string], "view">;

  endElection: TypedContractMethod<[], [void], "nonpayable">;

  endTime: TypedContractMethod<[], [bigint], "view">;

  getRemainingTime: TypedContractMethod<[], [bigint], "view">;

  getVoteByNationalID: TypedContractMethod<
    [_nationalID: string],
    [bigint],
    "view"
  >;

  getVoteCount: TypedContractMethod<
    [_candidateID: BigNumberish],
    [bigint],
    "view"
  >;

  setVerificationContract: TypedContractMethod<
    [_verificationContract: AddressLike],
    [void],
    "nonpayable"
  >;

  startRegistration: TypedContractMethod<[], [void], "nonpayable">;

  startTime: TypedContractMethod<[], [bigint], "view">;

  startVoting: TypedContractMethod<
    [_durationInMinutes: BigNumberish],
    [void],
    "nonpayable"
  >;

  state: TypedContractMethod<[], [bigint], "view">;

  verificationContract: TypedContractMethod<[], [string], "view">;

  voterContract: TypedContractMethod<[], [string], "view">;

  votesReceived: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "candidateContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<[_candidateID: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "castVoteByNationalID"
  ): TypedContractMethod<
    [_nationalID: string, _candidateID: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "electionCommission"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "electionName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "endElection"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRemainingTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVoteByNationalID"
  ): TypedContractMethod<[_nationalID: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVoteCount"
  ): TypedContractMethod<[_candidateID: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "setVerificationContract"
  ): TypedContractMethod<
    [_verificationContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startRegistration"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "startVoting"
  ): TypedContractMethod<
    [_durationInMinutes: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "verificationContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "voterContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "votesReceived"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getEvent(
    key: "ElectionStateChanged"
  ): TypedContractEvent<
    ElectionStateChangedEvent.InputTuple,
    ElectionStateChangedEvent.OutputTuple,
    ElectionStateChangedEvent.OutputObject
  >;
  getEvent(
    key: "VerificationContractSet"
  ): TypedContractEvent<
    VerificationContractSetEvent.InputTuple,
    VerificationContractSetEvent.OutputTuple,
    VerificationContractSetEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "ElectionStateChanged(uint8)": TypedContractEvent<
      ElectionStateChangedEvent.InputTuple,
      ElectionStateChangedEvent.OutputTuple,
      ElectionStateChangedEvent.OutputObject
    >;
    ElectionStateChanged: TypedContractEvent<
      ElectionStateChangedEvent.InputTuple,
      ElectionStateChangedEvent.OutputTuple,
      ElectionStateChangedEvent.OutputObject
    >;

    "VerificationContractSet(address)": TypedContractEvent<
      VerificationContractSetEvent.InputTuple,
      VerificationContractSetEvent.OutputTuple,
      VerificationContractSetEvent.OutputObject
    >;
    VerificationContractSet: TypedContractEvent<
      VerificationContractSetEvent.InputTuple,
      VerificationContractSetEvent.OutputTuple,
      VerificationContractSetEvent.OutputObject
    >;

    "VoteCast(address,uint256,string)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
